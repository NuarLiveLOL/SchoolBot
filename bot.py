import asyncio
import os
import signal
import sys
import subprocess
from flask import Flask, request
from threading import Thread
from aiogram import Bot, Dispatcher
from aiogram.types import Update
from aiogram.enums import ParseMode
from aiogram.methods import DeleteWebhook, SetWebhook
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

if not TOKEN or not ADMIN_ID:
    print("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω TOKEN –∏–ª–∏ ADMIN_ID –≤ .env")
    exit(1)

ADMIN_ID = int(ADMIN_ID)

# –°–æ–∑–¥–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
app = Flask(__name__)

@app.route('/')
def home():
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Flask!"

@app.route(f"/{TOKEN}", methods=["POST"])
async def webhook():
    update = Update(**request.get_json())
    await dp.feed_update(bot, update)
    return "OK", 200

# –ó–∞–ø—É—Å–∫ Flask –≤ —Ñ–æ–Ω–µ
def run_flask():
    app.run(host="0.0.0.0", port=5000, debug=False, use_reloader=False)

# –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞
def kill_old_sessions():
    try:
        print("üõë –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞...")
        subprocess.run(["pkill", "-f", "bot.py"], check=True)
        print("‚úÖ –°—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    except subprocess.CalledProcessError:
        print("‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.")

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ü–ö
connected_pcs = {}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–º Flask
flask_thread = None

# –§—É–Ω–∫—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–æ—Ç–∞
async def shutdown():
    global flask_thread
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")

    await bot.session.close()
    
    if flask_thread and flask_thread.is_alive():
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Flask...")
        flask_thread.join(timeout=5)  # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ Flask
    sys.exit(0)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
def stop_handler(signum, frame):
    loop = asyncio.get_event_loop()
    loop.create_task(shutdown())

signal.signal(signal.SIGTERM, stop_handler)
signal.signal(signal.SIGINT, stop_handler)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message()
async def start(message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /connect, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è.")

# –ö–æ–º–∞–Ω–¥–∞ /connect
@dp.message()
async def connect_pc(message):
    pc_id = str(message.from_user.id)

    if pc_id in connected_pcs:
        return await message.reply(f"–≠—Ç–æ—Ç –ü–ö —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫ {connected_pcs[pc_id]}.")

    args = message.text.split(maxsplit=1)
    pc_name = args[1] if len(args) > 1 else f"PC_{pc_id}"
    connected_pcs[pc_id] = pc_name
    await message.reply(f"–ü–ö {pc_name} ({pc_id}) —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!")

# –ö–æ–º–∞–Ω–¥–∞ /list
@dp.message()
async def list_pcs(message):
    if message.from_user.id != ADMIN_ID:
        return await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    if not connected_pcs:
        return await message.reply("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ü–ö.")

    text = "–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –ü–ö:\n" + "\n".join(f"{pc_name} (ID: {pc})" for pc, pc_name in connected_pcs.items())
    await message.reply(text)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    global flask_thread
    print("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ–±—Ö—É–∫–∏
    await bot(DeleteWebhook(drop_pending_updates=True))

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫
    webhook_url = f"https://your-app-name.onrender.com/{TOKEN}"
    await bot(SetWebhook(url=webhook_url))

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = Thread(target=run_flask, daemon=False)
    flask_thread.start()

if __name__ == "__main__":
    kill_old_sessions()  # –£–±–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    asyncio.run(main())
