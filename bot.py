import asyncio
import os
import signal
import sys
import subprocess
from flask import Flask
from threading import Thread
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
TOKEN = os.getenv("TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

if not TOKEN or not ADMIN_ID:
    print("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω TOKEN –∏–ª–∏ ADMIN_ID –≤ .env")
    exit(1)

ADMIN_ID = int(ADMIN_ID)

# –°–æ–∑–¥–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
app = Flask(__name__)

@app.route('/')
def home():
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Flask!"

def run_flask():
    app.run(host="0.0.0.0", port=5000, debug=False, use_reloader=False)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–æ–≤–æ–≥–æ
def kill_old_sessions():
    try:
        print("üõë –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞...")
        subprocess.run(["pkill", "-f", "bot.py"])  # –£–±–∏–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–ø–∏–∏
        print("‚úÖ –°—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π: {e}")

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ü–ö
connected_pcs = {}

# –§–ª–∞–≥ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
running = True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–æ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
async def shutdown():
    global running
    running = False
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    await bot.session.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
    sys.exit(0)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ (CTRL+C, kill)
def stop_handler(signum, frame):
    asyncio.create_task(shutdown())

signal.signal(signal.SIGTERM, stop_handler)
signal.signal(signal.SIGINT, stop_handler)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /connect, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è.")

# –ö–æ–º–∞–Ω–¥–∞ /connect ‚Äî –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ü–ö
@dp.message(Command("connect"))
async def connect_pc(message: Message):
    pc_id = str(message.from_user.id)

    if pc_id in connected_pcs:
        return await message.reply(f"–≠—Ç–æ—Ç –ü–ö —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫ {connected_pcs[pc_id]}.")

    args = message.text.split(maxsplit=1)
    pc_name = args[1] if len(args) > 1 else f"PC_{pc_id}"
    connected_pcs[pc_id] = pc_name
    await message.reply(f"–ü–ö {pc_name} ({pc_id}) —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!")

# –ö–æ–º–∞–Ω–¥–∞ /list ‚Äî —Å–ø–∏—Å–æ–∫ –ü–ö
@dp.message(Command("list"))
async def list_pcs(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    if not connected_pcs:
        return await message.reply("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ü–ö.")

    text = "–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –ü–ö:\n" + "\n".join(f"{pc_name} (ID: {pc})" for pc, pc_name in connected_pcs.items())
    await message.reply(text)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

    await bot.delete_webhook(drop_pending_updates=True)  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await dp.start_polling(bot)


if __name__ == "__main__":
    kill_old_sessions()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–æ–≤–æ–π
    flask_thread = Thread(target=run_flask)
    flask_thread.start()
    asyncio.run(main())
