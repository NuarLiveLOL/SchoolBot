import asyncio
import os
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
from dotenv import load_dotenv
import requests

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()
TOKEN = os.getenv("TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

if not TOKEN or not ADMIN_ID:
    print("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω TOKEN –∏–ª–∏ ADMIN_ID –≤ .env")
    exit(1)

ADMIN_ID = int(ADMIN_ID)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ü–ö {telegram_id: pc_name}
connected_pcs = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π
async def clear_old_sessions():
    print("üõë –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏...")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º Webhook (–µ—Å–ª–∏ –±—ã–ª)
    async with bot.session:
        await bot.delete_webhook(drop_pending_updates=True)
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ API Telegram
    url = f"https://api.telegram.org/bot{TOKEN}/deleteWebhook?drop_pending_updates=true"
    response = requests.get(url)
    
    if response.status_code == 200:
        print("‚úÖ –í—Å–µ —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    else:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ Webhook: {response.text}")


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /connect, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è.")

# –ö–æ–º–∞–Ω–¥–∞ /connect ‚Äî –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ü–ö
@dp.message(Command("connect"))
async def connect_pc(message: Message):
    pc_id = str(message.from_user.id)  # Telegram ID = ID –ü–ö

    if pc_id in connected_pcs:
        return await message.reply(
            f"–≠—Ç–æ—Ç –ü–ö —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫ {connected_pcs[pc_id]}."
        )

    # –ë–µ—Ä–µ–º –∏–º—è –ü–ö –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ)
    args = message.text.split(maxsplit=1)
    pc_name = args[1] if len(args) > 1 else f"PC_{pc_id}"

    connected_pcs[pc_id] = pc_name
    await message.reply(f"–ü–ö {pc_name} ({pc_id}) —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!")

# –ö–æ–º–∞–Ω–¥–∞ /list ‚Äî —Å–ø–∏—Å–æ–∫ –ü–ö
@dp.message(Command("list"))
async def list_pcs(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    if not connected_pcs:
        return await message.reply("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ü–ö.")

    text = "–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –ü–ö:\n" + "\n".join(
        f"{pc_name} (ID: {pc})" for pc, pc_name in connected_pcs.items()
    )
    await message.reply(text)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    await clear_old_sessions()
    
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
