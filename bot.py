import os
import asyncio
import requests
import logging
from aiogram import Bot, Dispatcher
from aiogram.types import Message, Update
from aiogram.filters import Command
from dotenv import load_dotenv
from flask import Flask, request

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

if not TOKEN or not ADMIN_ID:
    print("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω TOKEN –∏–ª–∏ ADMIN_ID –≤ .env")
    exit(1)

ADMIN_ID = int(ADMIN_ID)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –ü–ö
connected_pcs = {}

# Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Webhook
app = Flask(__name__)

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (Render —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–∫—Ä—ã—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É)
@app.route("/", methods=["GET"])
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# Webhook –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@app.route(f"/{TOKEN}", methods=["POST"])
async def webhook():
    try:
        data = request.json
        update = Update.model_validate(data)
        await dp.feed_update(bot, update)
        return "OK", 200
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Webhook: {e}")
        return "Internal Server Error", 500

# üî• Keep-Alive –∑–∞–ø—Ä–æ—Å—ã üî•
async def keep_alive():
    while True:
        try:
            requests.get("https://api.weatherapi.com/v1/current.json?key=8428519cf2904ddaae4123314250602&q=London")
            print("Keep-alive –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ Keep-alive: {e}")
        await asyncio.sleep(300)  # –ó–∞–ø—Ä–æ—Å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ üöÄ
async def main():
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Webhook
    webhook_url = f"https://{os.getenv('RENDER_DOMAIN')}/{TOKEN}"
    await bot.set_webhook(webhook_url)

    # –ó–∞–ø—É—Å–∫–∞–µ–º Keep-Alive
    asyncio.create_task(keep_alive())

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
    app.run(host="0.0.0.0", port=10000)

if __name__ == "__main__":
    asyncio.run(main())
