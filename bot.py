import os
import asyncio
import requests
import logging
import threading
from aiogram import Bot, Dispatcher
from aiogram.types import Message, Update
from aiogram.filters import Command
from dotenv import load_dotenv
from flask import Flask, request

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")
RENDER_DOMAIN = os.getenv("RENDER_DOMAIN")

if not TOKEN or not ADMIN_ID or not RENDER_DOMAIN:
    print("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω TOKEN, ADMIN_ID –∏–ª–∏ RENDER_DOMAIN –≤ .env")
    exit(1)

ADMIN_ID = int(ADMIN_ID)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

# Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Webhook
app = Flask(__name__)

@app.route("/", methods=["GET"])
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route(f"/{TOKEN}", methods=["POST"])
async def webhook():
    try:
        data = request.json
        update = Update.model_validate(data)
        await dp.feed_update(bot, update)
        return "OK", 200
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Webhook: {e}")
        return "Internal Server Error", 500

# üî• Keep-Alive –ø—Ä–æ—Ü–µ—Å—Å üî•
def keep_alive():
    while True:
        try:
            requests.get("https://api.weatherapi.com/v1/current.json?key=8428519cf2904ddaae4123314250602&q=London")
            print("Keep-alive –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ Keep-alive: {e}")
        asyncio.run(asyncio.sleep(300))  # –ó–∞–ø—Ä–æ—Å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

# üöÄ **–ö–û–ú–ê–ù–î–´ –ë–û–¢–ê** üöÄ

@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç. –í–≤–µ–¥–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.")

@dp.message(Command("help"))
async def help_cmd(message: Message):
    await message.answer("üéÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                         "/start - –ù–∞—á–∞—Ç—å\n"
                         "/game - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
                         "/coin - –ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç—É\n"
                         "/dice - –ö–∏–Ω—É—Ç—å –∫—É–±–∏–∫\n"
                         "/weather - –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É")

@dp.message(Command("game"))
async def game_cmd(message: Message):
    await message.answer("üïπ –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É! –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /dice –∏–ª–∏ /coin.")

@dp.message(Command("coin"))
async def coin_cmd(message: Message):
    result = "–û—Ä–µ–ª" if os.urandom(1)[0] % 2 == 0 else "–†–µ—à–∫–∞"
    await message.answer(f"ü™ô –ú–æ–Ω–µ—Ç–∞ —É–ø–∞–ª–∞ –Ω–∞ {result}!")

@dp.message(Command("dice"))
async def dice_cmd(message: Message):
    dice_roll = (os.urandom(1)[0] % 6) + 1
    await message.answer(f"üé≤ –¢—ã –≤—ã–±—Ä–æ—Å–∏–ª {dice_roll}!")

@dp.message(Command("weather"))
async def weather_cmd(message: Message):
    try:
        response = requests.get("https://api.weatherapi.com/v1/current.json?key=8428519cf2904ddaae4123314250602&q=London")
        data = response.json()
        temp = data["current"]["temp_c"]
        condition = data["current"]["condition"]["text"]
        await message.answer(f"üå¶ –ü–æ–≥–æ–¥–∞ –≤ –õ–æ–Ω–¥–æ–Ω–µ: {temp}¬∞C, {condition}")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã.")

# üöÄ **–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞** üöÄ
async def main():
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Webhook
    webhook_url = f"https://{RENDER_DOMAIN}/{TOKEN}"
    await bot.set_webhook(webhook_url)

    # –ó–∞–ø—É—Å–∫–∞–µ–º Keep-Alive –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=keep_alive, daemon=True).start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ —Ñ–æ–Ω–µ
    app.run(host="0.0.0.0", port=10000, threaded=True)

if __name__ == "__main__":
    asyncio.run(main())
