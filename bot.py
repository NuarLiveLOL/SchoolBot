import os
import asyncio
import requests
import threading
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
from dotenv import load_dotenv
from flask import Flask

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

if not TOKEN or not ADMIN_ID:
    print("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω TOKEN –∏–ª–∏ ADMIN_ID –≤ .env")
    exit(1)

ADMIN_ID = int(ADMIN_ID)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –ü–ö
connected_pcs = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /connect, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è.")

# –ö–æ–º–∞–Ω–¥–∞ /connect
@dp.message(Command("connect"))
async def connect_pc(message: Message):
    pc_id = str(message.from_user.id)

    if pc_id in connected_pcs:
        return await message.reply(f"–≠—Ç–æ—Ç –ü–ö —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫ {connected_pcs[pc_id]}.")

    args = message.text.split(maxsplit=1)
    pc_name = args[1] if len(args) > 1 else f"PC_{pc_id}"

    connected_pcs[pc_id] = pc_name
    await message.reply(f"–ü–ö {pc_name} ({pc_id}) —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!")

# –ö–æ–º–∞–Ω–¥–∞ /list
@dp.message(Command("list"))
async def list_pcs(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    if not connected_pcs:
        return await message.reply("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ü–ö.")

    text = "–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –ü–ö:\n" + "\n".join(
        f"{pc_name} (ID: {pc})" for pc, pc_name in connected_pcs.items()
    )
    await message.reply(text)

# üî• –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ Render —á–µ—Ä–µ–∑ HTTP-–∑–∞–ø—Ä–æ—Å—ã üî•
app = Flask(__name__)

@app.route("/")
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run_flask():
    app.run(host="0.0.0.0", port=10000)

# üî• –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –ø–æ–≥–æ–¥—ã üî•
async def keep_alive():
    while True:
        try:
            requests.get("https://api.weatherapi.com/v1/current.json?key=8428519cf2904ddaae4123314250602&q=London")
            print("Keep-alive –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ Keep-alive: {e}")
        await asyncio.sleep(300)  # –ó–∞–ø—Ä–æ—Å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

# üî• –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ Flask –≤ –æ–¥–Ω–æ–º –ø–æ—Ç–æ–∫–µ üî•
async def main():
    threading.Thread(target=run_flask, daemon=True).start()
    asyncio.create_task(keep_alive())
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
